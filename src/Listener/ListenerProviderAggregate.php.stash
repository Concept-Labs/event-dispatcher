<?php
namespace Cl\EventDispatcher\Listener;


use IteratorAggregate;
use Traversable;

use Psr\EventDispatcher\ListenerProviderInterface;

/**
 * Aggregate implementation of ListenerProviderInterface.
 */
class ListenerProviderAggregate implements ListenerProviderInterface, IteratorAggregate
{

        
    /**
     * The Listener Providers Container
     *
     * @var array<ListenerProviderInterface>
     */
    private $_providers = [];

    /**
     * Get the array of listener providers.
     *
     * @return array<ListenerProviderInterface>
     */
    public function getProviders(): array
    {
        return $this->_providers;
    }


    /**
     * Constructor for ListenerProviderAggregate.
     *
     * @param ListenerProviderInterface ...$providers Listener providers to aggregate.
     */
    public function __construct(ListenerProviderInterface ...$providers)
    {
        $this->_providers = $providers;
    }

    /**
     * Attach a listener provider to the aggregate.
     *
     * @param ListenerProviderInterface $provider Listener provider to attach.
     * 
     * @return void
     */
    public function attach(ListenerProviderInterface $provider): void
    {
        $this->_providers[] = $provider;
    }


    /**
     * Detach a listener provider from the aggregate.
     *
     * @param ListenerProviderInterface $provider Listener provider to detach.
     *
     * @return bool True if the provider was detached, false otherwise.
     */
    public function detach(ListenerProviderInterface $provider): bool
    {
        if (false !== $detachKey = array_search($provider, $this->getProviders(), true)) {
            unset($this->_providers[$detachKey]);
            return true;
        }
        return false;
    }

    /**
     * {@inheritDoc}
     */
    public function getListenersForEvent(object $event): iterable
    {
        foreach ($this->getProviders() as $provider) {
            yield from $provider->getListenersForEvent(event: $event);
        }
    }

    /**
     * Get providers as iterator.
     * 
     * {@inheritDoc}
     *
     * @return Traversable|array Iterator over listener providers.
     */
    public function getIterator(): array
    {
        return $this->getProviders();
    }
}